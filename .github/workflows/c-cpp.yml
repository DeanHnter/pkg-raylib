name: Build raylib

on: workflow_dispatch

jobs:
  build-raylib:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Clone raylib
      run: git clone --recursive https://github.com/raysan5/raylib.git craylib
    
    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git cmake libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev libwayland-dev libxkbcommon-dev

    - name: Install Dependencies (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        brew update
        brew install cmake
        mkdir -p raylib/macos/aarch64
    
    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install make
        choco install cmake

    - name: Build raylib
      run: |
        mkdir artifacts
        cd craylib
        mkdir build && cd build
        cmake -DPLATFORM=Desktop -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE ..
        cmake --build . --config Release

    - name: Move library (Nix)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: |
        mv craylib/build/raylib/libraylib.a  artifacts/libraylib.a
    
    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mv craylib/build/raylib/Release/raylib.lib artifacts/raylib.lib
        
    - name: Archive Production Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: raylib-${{ matrix.os }}
        path: artifacts

  build-onyx:
    needs: build-raylib
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        path: downloaded-artifacts

    - name: Move raylib
      run: |
        mkdir -p raylib/linux/
        mkdir -p raylib/windows/
        mkdir -p raylib/macos/
        mv downloaded-artifacts/raylib-ubuntu-latest/libraylib.a raylib/linux/libraylib.a
        mv downloaded-artifacts/raylib-windows-latest/raylib.lib raylib/windows/raylib.lib
        mv downloaded-artifacts/raylib-macOS-latest/libraylib.a raylib/macos/libraylib.a

    - name: Commit Library Files with Git LFS
      run: |
        # Set up Git identity
        git config --global user.name 'onyx-ci'
        git config --global user.email 'onyx-ci@onyxlang.io'
        git lfs install
        git lfs track "raylib/linux/libraylib.a"
        git lfs track "raylib/windows/raylib.lib"
        git lfs track "raylib/macos/libraylib.a"
        git add .gitattributes
        git add raylib/linux/libraylib.a raylib/windows/raylib.lib raylib/macos/libraylib.a
        git commit -m 'CI: Update raylib binaries'
        
    - name: install wasmer
      run: |
        curl https://get.wasmer.io -sSfL | sh

    - name: onyx build
      run: |
        source /home/runner/.wasmer/wasmer.sh
        echo -e "\n\n\n" | sh <(curl https://get.onyxlang.io -sSfL)  # For simulating 3 Enter presses.
      
    - name: Setup ONYX_PATH and add to PATH
      run: |
        source /home/runner/.wasmer/wasmer.sh
        echo "ONYX_PATH=/home/runner/.onyx" >> $GITHUB_ENV
        echo "/home/runner/.onyx/bin" >> $GITHUB_PATH
        export ONYX_PATH="/home/runner/.onyx"
        export PATH="$ONYX_PATH/bin:$PATH"
        /home/runner/.onyx/bin/onyx run --generate-foreign-info build.onyx
        /home/runner/.onyx/bin/onyx help
      shell: bash

    - name: Push Library Files with Git LFS to main
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
